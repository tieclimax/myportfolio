{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landind","style","width","margin","className","col","src","alt","href","rel","target","aria-hidden","Component","About","contact","projects","resume","Main","exact","path","component","LandingPage","AboutMe","Contact","Projects","Resume","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA2CeA,E,iLAvCP,OACI,yBAAKC,MAAO,CAACC,MAAO,OAASC,OAAQ,SACjC,kBAAC,OAAD,CAAMC,UAAW,gBACb,kBAAC,OAAD,CAAMC,IAAO,IACT,yBAAKC,IAAI,8EAETC,IAAK,SACLH,UAAW,eAGX,yBAAKA,UAAW,eACZ,wDACA,6BACA,uFACJ,yBAAKA,UAAY,gBAEb,uBAAGI,KAAO,8CAA8CC,IAAI,sBAAsBC,OAAO,UACrF,uBAAGN,UAAY,wBAAwBO,cAAc,UAGzD,uBAAGH,KAAO,qBAAqBC,IAAI,sBAAsBC,OAAO,UAC5D,uBAAGN,UAAY,sBAAsBO,cAAc,UAGvD,uBAAGH,KAAO,2DAA2DC,IAAI,sBAAsBC,OAAO,UAClG,uBAAGN,UAAY,uBAAuBO,cAAc,mB,GA3B9DC,aCSPC,E,iLANX,OACE,6BAAK,+C,GAHSD,aCSLE,E,iLARP,OACI,6BACI,iD,GAJMF,aCUPG,E,iLARP,OACI,6BACI,kD,GAJOH,aCURI,E,iLARP,OACI,6BACI,gD,GAJKJ,aCkBNK,EAVF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,OAAK,EAACC,KAAO,IAAIC,UAAWC,IACpC,kBAAC,IAAD,CAAQF,KAAO,WAAWC,UAAWE,IACrC,kBAAC,IAAD,CAAQH,KAAO,WAAWC,UAAWG,IACrC,kBAAC,IAAD,CAAQJ,KAAO,YAAYC,UAAWI,IACtC,kBAAC,IAAD,CAAQL,KAAO,UAAUC,UAAWK,M,QCsB7BC,E,iLA7Bb,OACE,yBAAKtB,UAAU,oBACf,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAW,eAAeuB,MAAM,qBAAqBC,QAAM,GAC/D,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,SAAD,CAAQzB,UAAY,aAAauB,MAAM,sBACjC,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAME,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,UAAD,KACI,yBAAKzB,UAAU,iBAChB,kBAAC,EAAD,a,GAvBOQ,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCRNC,IAASC,OACL,kBAAC,IAAD,KACA,kBAAC,EAAD,OAEEC,SAASC,eAAe,SDmHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.66951df6.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport {Grid , Cell} from 'react-mdl';\r\nclass Landind extends Component{\r\n    render() {\r\n        return (\r\n            <div style={{width: '100%' , margin: 'auto'}}>\r\n                <Grid className= \"landing-grid\">\r\n                    <Cell col = {12}>\r\n                        <img src='https://icon-library.net/images/avatar-icon-images/avatar-icon-images-4.jpg'\r\n                       \r\n                        alt= \"avatat\"\r\n                        className =\"avatar-img\">\r\n\r\n                        </img>\r\n                        <div className= \"banner-text\">\r\n                            <h1>Full Stack Web Developer</h1>\r\n                            <hr/>\r\n                            <p>HTML/CSS | Boostrap | JavaScript | Java | React | NodeJS</p>\r\n                        <div className = \"social-links\">\r\n                            {/* facebook */ }\r\n                            <a href = \"https://www.facebook.com/panuwat.khriudomza\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                <i className = \"fa fa-facebook-square\" aria-hidden = \"true\"/>\r\n                            </a>\r\n                            {/* Github */ }\r\n                            <a href = \"https://github.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                <i className = \"fa fa-github-square\" aria-hidden = \"true\"/>\r\n                            </a>\r\n                            {/* youtube */ }\r\n                            <a href = \"https://www.youtube.com/channel/UC0MTlQ6vyX_sYREXO59Hfcg\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                <i className = \"fa fa-youtube-square\" aria-hidden = \"true\"/>\r\n                            </a>\r\n                           \r\n                        </div>\r\n                        \r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n              \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landind;","import React, { Component } from 'react';\r\n\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return(\r\n      <div><h1>About Page</h1></div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About;","import React , {Component} from 'react';\r\n\r\nclass contact extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Contact Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default contact;","import React , {Component} from 'react';\r\n\r\nclass projects extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Projects Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default projects;","import React , {Component} from 'react';\r\n\r\nclass resume extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Resume Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default resume;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from './landingpage';\r\nimport AboutMe from './aboutme';\r\nimport Contact from './contact';\r\nimport Projects from './projects';\r\nimport Resume from './resume';\r\n\r\n\r\nconst Main = () => (\r\n    <Switch>\r\n        <Route  exact path = \"/\" component={LandingPage} />\r\n        <Route  path = \"/aboutme\" component={AboutMe} />\r\n        <Route  path = \"/contact\" component={Contact} />\r\n        <Route  path = \"/projects\" component={Projects} />\r\n        <Route  path = \"/resume\" component={Resume} />     \r\n    </Switch>        \r\n)\r\n\r\nexport default Main;","import React ,{Component}from 'react';\nimport './App.css';\nimport {Layout,Header,Navigation,Drawer,Content} from 'react-mdl';\nimport Main from './components/main';\nimport {Link} from 'react-router-dom';\n\n\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"demo-big-content\">\n    <Layout>\n        <Header className =\"header-color\" title=\"Panuwat Khrai-udom\" scroll>\n            <Navigation>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/aboutme\">About Me</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Header>\n        <Drawer className = \"title-name\" title=\"Panuwat Khrai-udom\" >\n              <Navigation>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/aboutme\">About Me</Link>\n                <Link to=\"/projects\">Projects</Link>\n                <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n           <Main />\n        </Content>\n    </Layout>\n    </div>\n      );\n        } \n    }  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}